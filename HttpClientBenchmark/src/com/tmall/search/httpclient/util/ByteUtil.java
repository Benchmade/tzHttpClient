package com.tmall.search.httpclient.util;



public final class ByteUtil {

	private static final byte[] CHUNK_END = new byte[] { 10, 13, 10, 13, 48 };

	/**
	 * 合并2个byteArray,读取数据时,可能一个bytebuffer不能完全读取完,使用这个方法,合并多次读取到的byte
	 * @param data			原有数组
	 * @param increment		新增数组
	 * @param length		新增数组长度
	 * @return 				组合后的新数组
	 */
	public static byte[] mergeByteArray(byte[] data, byte[] increment, int length) {
		return mergeByteArray(data, increment, 0, length);
	}

	/**
	 * 合并2个byteArray,读取数据时,可能一个bytebuffer不能完全读取完,使用这个方法,合并多次读取到的byte
	 * @param data			原有数组
	 * @param increment		新增数组
	 * @param copyLength		copy长度
	 * @return 				组合后的新数组
	 */
	public static byte[] mergeByteArray(byte[] data, byte[] increment, int start, int copyLength) {
		byte[] resultArray;
		if (data == null || data.length == 0) {//如果原始的数组是空的,那么直接截取新增的数组
			if (increment == null || copyLength <= 0 || start==increment.length) {
				resultArray = new byte[0];
			} else {
				resultArray = new byte[copyLength];
				System.arraycopy(increment, start, resultArray, 0, copyLength);
			}
		} else {
			if (increment == null || copyLength <= 0 || start==increment.length) { //如果后面的数组限定条件有问题,那么直接返回前面的数组
				resultArray = data;
			}else{
				resultArray = new byte[data.length + copyLength];
				System.arraycopy(data, 0, resultArray, 0, data.length);
				System.arraycopy(increment, start, resultArray, data.length, copyLength);
			}
		}
		return resultArray;
	}

	/**
	 * sb.append("25\r\n");		
	  sb.append("This is the data in the first chunk\r\n"); // 37 bytes of payload
			// (conveniently consisting of ASCII characters only)
	sb.append("\r\n1A\r\n");
	sb.append("and this is the second one"); // 26 bytes of payload
			// (conveniently consisting of ASCII characters only)
	sb.append("\r\n0\r\n\r\n");D:/openjdk-7u6-fcs-src-b24-28_aug_2012.zip
	 * @param chunkData
	 * @return
	*/
	public static boolean isChunkEnd(ChunkStateInfo chunkInfo, byte[] data, int length) {
		if (data == null || length == 0) {
			return true;
		}
		if (chunkInfo.getLastBuffRemaining() != null && chunkInfo.getLastBuffRemaining().length + length < 5) {
			throw new NullPointerException("Check chunk end mark error");
		}
		byte cc;
		for (int i = 0; i < CHUNK_END.length; i++) {
			if (length - i - 1 < 0) {
				cc = chunkInfo.getLastBuffRemaining()[chunkInfo.getLastBuffRemaining().length + length - i - 1];
			} else {
				cc = data[length - i - 1];
			}
			if (CHUNK_END[i] != cc) {
				return false;
			}
		}
		return true;
	}

	public static void main(String[] args) {
		/*byte[] chunk = new byte[] {72,84,84,80,47,49,46,49,32,50,48,48,32,79,75,13,10,83,101,114,118,101,114,58,32,84,101,110,103,105,110,101,13,10,68,97,116,101,58,32,84,104,117,44,32,49,55,32,79,99,116,32,50,48,49,51,32,48,55,58,50,51,58,48,55,32,71,77,84,13,10,67,111,110,116,101,110,116,45,84,121,112,101,58,32,116,101,120,116,47,104,116,109,108,13,10,84,114,97,110,115,102,101,114,45,69,110,99,111,100,105,110,103,58,32,99,104,117,110,107,101,100,13,10,67,111,110,110,101,99,116,105,111,110,58,32,107,101,101,112,45,97,108,105,118,101,13,10,75,101,101,112,45,65,108,105,118,101,58,32,116,105,109,101,111,117,116,61,49,48,13,10,86,97,114,121,58,32,65,99,99,101,112,116,45,69,110,99,111,100,105,110,103,13,10,13,10,49,51,100,48,13,10,60,63,120,109,108,32,118,101,114,115,105,111,110,61,34,49,46,48,34,32,101,110,99,111,100,105,110,103,61,34,71,66,75,34,63,62,60,99,111,110,102,62,60,113,117,101,114,121,32,110,97,109,101,61,34,99,111,110,100,105,116,105,111,110,34,62,60,112,32,110,97,109,101,61,34,99,97,116,34,62,50,60,47,112,62,60,112,32,110,97,109,101,61,34,107,34,62,49,45,50,37,67,52,37,69,65,37,66,67,37,66,54,60,47,112,62,60,47,113,117,101,114,121,62,60,114,101,115,117,108,116,32,110,97,109,101,61,34,109,76,105,115,116,34,32,115,116,97,116,117,115,61,34,48,34,32,100,101,115,99,61,34,34,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,84,111,112,99,97,116,101,80,114,101,100,105,99,116,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,116,109,97,108,108,113,117,101,114,121,103,117,105,100,101,34,32,118,61,34,49,46,48,34,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,102,114,111,110,116,99,97,116,100,105,114,101,99,116,34,32,116,121,112,101,61,34,49,34,32,118,61,34,50,46,48,34,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,116,109,97,108,108,95,115,104,111,112,113,117,101,114,121,34,32,118,61,34,50,46,48,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,114,101,119,114,105,116,101,34,32,118,61,34,51,46,48,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,33,91,67,68,65,84,65,91,49,45,50,-60,-22,-68,-74,93,93,62,60,47,112,62,60,112,32,110,97,109,101,61,34,111,109,105,116,114,101,119,114,105,116,101,34,62,60,33,91,67,68,65,84,65,91,93,93,62,60,47,112,62,60,112,32,110,97,109,101,61,34,111,114,105,95,115,116,114,34,62,60,33,91,67,68,65,84,65,91,93,93,62,60,47,112,62,60,112,32,110,97,109,101,61,34,111,109,105,116,95,115,116,114,34,62,60,33,91,67,68,65,84,65,91,93,93,62,60,47,112,62,60,112,32,110,97,109,101,61,34,111,109,105,116,95,112,111,115,34,62,60,33,91,67,68,65,84,65,91,93,93,62,60,47,112,62,60,112,32,110,97,109,101,61,34,115,112,101,108,108,99,104,101,99,107,34,62,60,33,91,67,68,65,84,65,91,93,93,62,60,47,112,62,60,112,32,110,97,109,101,61,34,110,117,109,98,101,114,34,62,60,33,91,67,68,65,84,65,91,48,93,93,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,102,105,108,116,101,114,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,103,114,111,117,112,34,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,107,101,121,117,114,108,95,109,97,108,108,34,32,118,61,34,50,46,48,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,113,117,101,114,121,97,110,97,108,121,122,101,114,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,102,111,114,101,99,97,116,115,62,60,47,102,111,114,101,99,97,116,115,62,60,109,108,114,115,62,60,47,109,108,114,115,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,110,97,118,34,32,116,121,112,101,61,34,49,34,32,118,61,34,50,46,49,34,62,60,98,102,116,114,101,119,114,105,116,101,62,60,33,91,67,68,65,84,65,91,45,32,49,32,50,32,-60,-22,-68,-74,93,93,62,60,47,98,102,116,114,101,119,114,105,116,101,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,116,109,97,108,108,99,97,116,101,109,105,120,115,111,114,116,34,32,32,118,61,34,49,46,48,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,33,91,67,68,65,84,65,91,93,93,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,113,117,101,114,121,100,105,114,101,99,116,34,32,118,61,34,50,46,48,34,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,112,115,119,101,105,103,104,116,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,49,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,109,111,100,105,102,105,101,100,117,114,108,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,33,91,67,68,65,84,65,91,93,93,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,113,105,110,102,111,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,49,37,48,51,48,37,48,53,48,37,48,49,45,37,48,51,48,37,48,53,48,37,48,49,50,37,48,51,48,37,48,53,48,37,48,49,37,67,52,37,69,65,37,66,67,37,66,54,37,48,51,48,37,48,53,48,37,48,52,37,48,52,37,48,52,37,55,67,37,55,67,37,55,67,37,48,52,49,53,37,51,65,53,37,51,65,49,55,49,56,52,49,54,52,49,53,53,50,57,55,37,51,65,101,113,37,50,67,48,46,48,53,37,51,66,49,53,37,51,65,53,37,51,65,49,55,49,56,56,52,53,57,49,50,50,53,57,51,37,51,65,101,113,37,50,67,48,46,49,50,37,48,52,110,101,119,117,115,101,114,37,51,65,49,37,51,66,117,115,101,114,116,121,112,101,37,51,65,48,37,48,52,37,48,52,37,48,52,45,49,46,48,48,48,48,37,48,52,37,48,54,37,48,54,37,48,52,37,48,52,37,48,52,37,48,52,37,48,52,37,48,52,45,49,37,51,65,48,37,48,52,37,48,52,48,37,51,65,48,37,48,52,37,48,52,37,48,52,45,49,37,51,65,48,37,48,52,49,52,57,56,50,57,48,55,57,49,37,51,65,49,53,56,55,53,52,48,48,55,51,37,51,65,49,54,49,57,57,51,56,56,53,48,37,51,65,45,49,55,52,50,54,55,55,57,51,54,37,48,52,37,48,52,37,48,52,37,48,52,37,48,52,37,48,52,37,48,52,37,48,52,48,37,51,65,48,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,117,115,101,114,105,110,102,111,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,33,91,67,68,65,84,65,91,95,93,93,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,117,115,101,114,109,111,100,101,108,95,100,105,115,112,108,97,121,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,33,91,67,68,65,84,65,91,93,93,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,109,108,114,115,99,111,114,101,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,109,108,114,102,105,101,108,100,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,99,97,116,101,103,111,114,121,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,109,108,114,103,114,111,117,112,115,99,111,114,101,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,102,77,108,114,115,99,111,114,101,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,102,77,108,114,103,114,111,117,112,115,99,111,114,101,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,98,97,115,101,99,111,108,111,114,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,118,105,115,105,116,101,100,115,105,100,115,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,100,105,115,116,105,110,99,116,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,33,91,67,68,65,84,65,91,93,93,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,98,105,114,116,104,100,97,121,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,110,101,119,117,115,101,114,116,121,112,101,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,49,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,102,97,115,105,111,110,117,115,101,114,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,98,101,114,108,105,110,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,112,114,105,99,101,108,105,109,105,116,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,117,112,50,99,97,116,115,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,48,60,47,112,62,60,112,32,110,97,109,101,61,34,97,99,116,105,118,105,116,121,34,62,60,47,112,62,60,47,109,111,100,117,108,101,62,60,109,111,100,117,108,101,32,110,97,109,101,61,34,117,115,101,114,100,105,118,101,114,115,105,116,121,34,62,60,112,32,110,97,109,101,61,34,114,101,115,117,108,116,34,62,45,45,48,95,48,95,48,95,48,95,48,95,48,45,45,45,45,48,45,45,45,45,45,60};
		//System.out.println(new String(chunk));
		System.out.println(Integer.parseInt("13d0", 16));
		System.out.println(chunk.length);
		byte[] cd = new byte[5072];
		System.arraycopy(chunk, 201 + 2, cd, 0, 5072);*/
		/*System.out.println(Integer.parseInt(new String(new byte[]{50, 48, 48, 48}),16));*/

		/*byte[] a = new byte[]{72,84,84,13,10,48};
		byte[] b = new byte[]{13,10,13,10};
		Xiaolin xiaolin = new Xiaolin();
		xiaolin.setChunkData(a);
		
		System.out.println(isChunkEnd(xiaolin, b, 4));*/
		System.out.println((byte) '\n');

	}

	/**
	 * 
	 * @param chunkInfo	chunkContext的信息.
	 * @param buffer	当前读取出来的buffer
	 * @param pos	buffer其实位置.
	 * @param length	buffer的长度
	 * @return
	 */
	public static int fillChunkBody(ChunkStateInfo chunkInfo, byte[] buffer, int pos, int length) {
		/*if (buffer[length - 1] == 10 && buffer[length - 2] == 13) {
			System.out.println();
		}*/
		//System.out.println("xx");
		if (chunkInfo.getLastBuffRemaining() != null) {//如果上次有没有读取完的剩余byte[],直接合并到当前的byte[]中.
			buffer = mergeByteArray(chunkInfo.getLastBuffRemaining(), buffer, pos, length - pos);
			pos = 0;
			length = buffer.length;//长度设置为合并后的byte[]长度
			chunkInfo.setLastBuffRemaining(null);
		}
		if (chunkInfo.getUnFinishedNum() > 0) {//如果上次读取到结尾,没有读取到结束符      1,2,3  -  13,10这次应该校验,代码没有写
			pos = pos + chunkInfo.getUnFinishedNum();
			chunkInfo.setUnFinishedNum(0);
		}
		if (chunkInfo.getShengyu() > 0) {//如果上次有没有读取完的,这次继续读取
			if (chunkInfo.getShengyu() > length - pos) {//如果剩余的大小大于这次读取的内容,那么直接把这次的内容都读取进来
				chunkInfo.setChunkData(mergeByteArray(chunkInfo.getChunkData(), buffer, pos, length - pos));
				chunkInfo.setShengyu(chunkInfo.getShengyu() - (length - pos));
				pos = length;
			} else {
				chunkInfo.setChunkData(mergeByteArray(chunkInfo.getChunkData(), buffer, pos, chunkInfo.getShengyu()));
				pos = pos + chunkInfo.getShengyu();
				chunkInfo.setShengyu(0);
				if (length - pos < 2) {
					chunkInfo.setUnFinishedNum(2 - (length - pos));
					pos = length;
				} else {
					if (buffer[pos] != HttpUtil.CR && buffer[pos + 1] != HttpUtil.LF) {
						throw new NullPointerException("this chunk terminated abnormally CRLF");//没有正常结束
					} else {
						pos = pos + 2;
						if(length - pos <2){
							byte[] residueData = new byte[length - pos];
							System.arraycopy(buffer, pos, residueData, 0, length - pos);
							chunkInfo.setLastBuffRemaining(residueData);
							pos = length;
						}
					}
				}
			}
		}
		for (int i = pos; i < length - 1; i++) {
			if (buffer[i] == HttpUtil.CR && buffer[i + 1] == HttpUtil.LF) {
				int chunkSize = Integer.parseInt(new String(buffer, pos, i - pos), 16);
				if(chunkSize==0){
					if(i+3<length){
						break;
					}
				}else{
					chunkInfo.setShengyu(chunkSize);
					i = fillChunkBody(chunkInfo, buffer, i + 2, length);
					pos = i;
				}
			}
			if (i == length - 2) {//如果读取到最后还没有匹配CRLF,那么数据规整,返回到下次读取时整合到下次读取的byte中.
				byte[] residueData = new byte[length - pos];
				System.arraycopy(buffer, pos, residueData, 0, length - pos);
				chunkInfo.setLastBuffRemaining(residueData);
			}
		}
		return pos;
	}

}
